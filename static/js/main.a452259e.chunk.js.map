{"version":3,"sources":["model/user.ts","model/message.ts","components/new-message/paper-plane-solid.svg","components/new-message/new-message.component.tsx","components/message/message.component.tsx","components/message-list/message-list.component.tsx","App.tsx","hooks/use-chatbot.hook.ts","reportWebVitals.ts","index.tsx"],"names":["currentUser","name","logoUrl","bot","createMessage","user","text","id","uuidv4","timestamp","Math","floor","Date","getTime","NewMessageComponent","props","useState","setText","onSubmit","e","preventDefault","_","onSubmitNewMessage","className","type","placeholder","onChange","target","value","src","sendIcon","alt","MessageComponent","isCurrentUserAuthor","message","moment","format","MessageListComponent","ref","useRef","useEffect","current","scrollTo","scrollHeight","clientHeight","scrollTop","messages","map","App","setMessages","addMessage","newMessage","currentMessages","botUser","timer","setTimeout","isEmpty","last","clearTimeout","useChatbot","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a452259e.chunk.js","sourcesContent":["export interface User {\n  name: string;\n  logoUrl: string;\n}\n\nexport const currentUser: User = {\n  name: \"User\",\n  logoUrl: \"/gb-react/user-solid.svg\",\n};\n\nexport const bot: User = {\n  name: \"Chatbot.exe\",\n  logoUrl: \"/gb-react/robot-solid.svg\",\n};\n","import {v4 as uuidv4} from 'uuid';\nimport { User } from './user';\n\nexport interface Message {\n  id: string;\n  user: User;\n  text: string;\n  timestamp: number;\n}\n\nexport const createMessage = (user: User, text: string): Message => { \n  return {\n    id: uuidv4(),\n    user: user,\n    text: text,\n    timestamp: Math.floor((new Date()).getTime() / 1000)\n  };\n}\n","export default __webpack_public_path__ + \"static/media/paper-plane-solid.57094fe6.svg\";","import React, { useState } from \"react\";\nimport { Message, createMessage } from \"../../model/message\";\nimport { User } from \"../../model/user\";\nimport sendIcon from \"./paper-plane-solid.svg\";\nimport \"./new-message.css\";\n\ninterface NewMessageProps {\n  user: User;\n  onSubmitNewMessage: (message: Message) => void;\n}\n\nconst DEFAULT_VALUE = \"\";\n\nexport const NewMessageComponent: React.FC<NewMessageProps> = (props) => {\n  const [text, setText] = useState<string>(DEFAULT_VALUE);\n  const setMessageText = (e: React.ChangeEvent<HTMLInputElement>) => {\n    e.preventDefault();\n    setText((_) => e.target.value);\n  };\n  const resetAndSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (text === DEFAULT_VALUE) return;\n    setText((_) => DEFAULT_VALUE);\n    props.onSubmitNewMessage(createMessage(props.user, text));\n  };\n  return (\n    <form onSubmit={resetAndSubmit} className=\"new-message-wrapper\">\n      <input\n        className=\"new-message-edit\"\n        type=\"text\"\n        placeholder=\"Message\"\n        onChange={setMessageText}\n        value={text}\n      />\n      <button type=\"submit\" className=\"new-message-submit\">\n        <img src={sendIcon} alt=\"Send\" />\n      </button>\n    </form>\n  );\n};\n","import { Message } from \"../../model/message\";\nimport \"./message.css\";\nimport moment from \"moment\";\n\ninterface MessageProps {\n  message: Message;\n  isCurrentUserAuthor: boolean;\n}\n\nexport const MessageComponent: React.FC<MessageProps> = (props) => {\n  return (\n    <div\n      className={\n        props.isCurrentUserAuthor\n          ? \"message-wrapper-reverse\"\n          : \"message-wrapper\"\n      }\n    >\n      <div className=\"message-logo\">\n        <img src={props.message.user.logoUrl} alt=\"logo\" />\n      </div>\n      <div key={props.message.id} className=\"message-text\">\n        <div className=\"message-user-name\">{props.message.user.name}</div>\n        <div>{props.message.text}</div>\n        <div className=\"message-timestamp\">\n          {moment(props.message.timestamp).format(\"h:mm\")}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { useEffect, useRef } from \"react\";\nimport { Message } from \"../../model/message\";\nimport { User } from \"../../model/user\";\nimport { MessageComponent } from \"../message/message.component\";\nimport \"./message-list.css\";\n\ninterface MessageListProps {\n  messages: Message[];\n  currentUser: User;\n}\n\nexport const MessageListComponent: React.FC<MessageListProps> = (props) => {\n  const ref = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (ref.current) {\n      const scrollTo = ref.current.scrollHeight - ref.current.clientHeight;\n      ref.current.scrollTop = scrollTo;\n    }\n  }, [props.messages]);\n  return (\n    <div className=\"message-list\" ref={ref}>\n      {props.messages.map((message) => (\n        <MessageComponent\n          key={message.id}\n          message={message}\n          isCurrentUserAuthor={message.user === props.currentUser}\n        ></MessageComponent>\n      ))}\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { Message } from \"./model/message\";\nimport { currentUser, bot } from \"./model/user\";\nimport { NewMessageComponent } from \"./components/new-message/new-message.component\";\nimport { useChatbot } from \"./hooks/use-chatbot.hook\";\nimport { MessageListComponent } from \"./components/message-list/message-list.component\";\n\nconst App: React.FC<{}> = () => {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const addMessage = (newMessage: Message) => {\n    setMessages((currentMessages) => [...currentMessages, newMessage]);\n  };\n  useChatbot(bot, messages, addMessage);\n  return (\n    <div className=\"app-wrapper\">\n      <MessageListComponent\n        messages={messages}\n        currentUser={currentUser}\n      ></MessageListComponent>\n      <NewMessageComponent\n        user={currentUser}\n        onSubmitNewMessage={addMessage}\n      ></NewMessageComponent>\n    </div>\n  );\n};\n\nexport default App;\n","import _ from \"lodash\";\nimport { useEffect } from \"react\";\nimport { createMessage, Message } from \"../model/message\";\nimport { User } from \"../model/user\";\n\nexport const useChatbot = (botUser: User, messages: Message[], addMessage: (newMessage: Message) => void) => useEffect(() => {\n    const timer = setTimeout(() => {\n      if (_.isEmpty(messages) || _.last(messages)?.user === botUser) {\n        return;\n      }\n      addMessage(createMessage(botUser, \"WE ARE BORG\"));\n    }, 1500);\n    return () => clearTimeout(timer);\n  }, [botUser, addMessage, messages]);","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}